/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.components;


import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * InstanceRestrictions - Success
 */

public class InstanceRestrictions {

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object")
    private Optional<? extends InstanceRestrictionsObject> object;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowlist")
    private Optional<Boolean> allowlist;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blocklist")
    private Optional<Boolean> blocklist;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("block_email_subaddresses")
    private Optional<Boolean> blockEmailSubaddresses;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ignore_dots_for_gmail_addresses")
    private Optional<Boolean> ignoreDotsForGmailAddresses;

    @JsonCreator
    public InstanceRestrictions(
            @JsonProperty("object") Optional<? extends InstanceRestrictionsObject> object,
            @JsonProperty("allowlist") Optional<Boolean> allowlist,
            @JsonProperty("blocklist") Optional<Boolean> blocklist,
            @JsonProperty("block_email_subaddresses") Optional<Boolean> blockEmailSubaddresses,
            @JsonProperty("ignore_dots_for_gmail_addresses") Optional<Boolean> ignoreDotsForGmailAddresses) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(allowlist, "allowlist");
        Utils.checkNotNull(blocklist, "blocklist");
        Utils.checkNotNull(blockEmailSubaddresses, "blockEmailSubaddresses");
        Utils.checkNotNull(ignoreDotsForGmailAddresses, "ignoreDotsForGmailAddresses");
        this.object = object;
        this.allowlist = allowlist;
        this.blocklist = blocklist;
        this.blockEmailSubaddresses = blockEmailSubaddresses;
        this.ignoreDotsForGmailAddresses = ignoreDotsForGmailAddresses;
    }
    
    public InstanceRestrictions() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InstanceRestrictionsObject> object() {
        return (Optional<InstanceRestrictionsObject>) object;
    }

    @JsonIgnore
    public Optional<Boolean> allowlist() {
        return allowlist;
    }

    @JsonIgnore
    public Optional<Boolean> blocklist() {
        return blocklist;
    }

    @JsonIgnore
    public Optional<Boolean> blockEmailSubaddresses() {
        return blockEmailSubaddresses;
    }

    @JsonIgnore
    public Optional<Boolean> ignoreDotsForGmailAddresses() {
        return ignoreDotsForGmailAddresses;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public InstanceRestrictions withObject(InstanceRestrictionsObject object) {
        Utils.checkNotNull(object, "object");
        this.object = Optional.ofNullable(object);
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public InstanceRestrictions withObject(Optional<? extends InstanceRestrictionsObject> object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public InstanceRestrictions withAllowlist(boolean allowlist) {
        Utils.checkNotNull(allowlist, "allowlist");
        this.allowlist = Optional.ofNullable(allowlist);
        return this;
    }

    public InstanceRestrictions withAllowlist(Optional<Boolean> allowlist) {
        Utils.checkNotNull(allowlist, "allowlist");
        this.allowlist = allowlist;
        return this;
    }

    public InstanceRestrictions withBlocklist(boolean blocklist) {
        Utils.checkNotNull(blocklist, "blocklist");
        this.blocklist = Optional.ofNullable(blocklist);
        return this;
    }

    public InstanceRestrictions withBlocklist(Optional<Boolean> blocklist) {
        Utils.checkNotNull(blocklist, "blocklist");
        this.blocklist = blocklist;
        return this;
    }

    public InstanceRestrictions withBlockEmailSubaddresses(boolean blockEmailSubaddresses) {
        Utils.checkNotNull(blockEmailSubaddresses, "blockEmailSubaddresses");
        this.blockEmailSubaddresses = Optional.ofNullable(blockEmailSubaddresses);
        return this;
    }

    public InstanceRestrictions withBlockEmailSubaddresses(Optional<Boolean> blockEmailSubaddresses) {
        Utils.checkNotNull(blockEmailSubaddresses, "blockEmailSubaddresses");
        this.blockEmailSubaddresses = blockEmailSubaddresses;
        return this;
    }

    public InstanceRestrictions withIgnoreDotsForGmailAddresses(boolean ignoreDotsForGmailAddresses) {
        Utils.checkNotNull(ignoreDotsForGmailAddresses, "ignoreDotsForGmailAddresses");
        this.ignoreDotsForGmailAddresses = Optional.ofNullable(ignoreDotsForGmailAddresses);
        return this;
    }

    public InstanceRestrictions withIgnoreDotsForGmailAddresses(Optional<Boolean> ignoreDotsForGmailAddresses) {
        Utils.checkNotNull(ignoreDotsForGmailAddresses, "ignoreDotsForGmailAddresses");
        this.ignoreDotsForGmailAddresses = ignoreDotsForGmailAddresses;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InstanceRestrictions other = (InstanceRestrictions) o;
        return 
            Objects.deepEquals(this.object, other.object) &&
            Objects.deepEquals(this.allowlist, other.allowlist) &&
            Objects.deepEquals(this.blocklist, other.blocklist) &&
            Objects.deepEquals(this.blockEmailSubaddresses, other.blockEmailSubaddresses) &&
            Objects.deepEquals(this.ignoreDotsForGmailAddresses, other.ignoreDotsForGmailAddresses);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            object,
            allowlist,
            blocklist,
            blockEmailSubaddresses,
            ignoreDotsForGmailAddresses);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InstanceRestrictions.class,
                "object", object,
                "allowlist", allowlist,
                "blocklist", blocklist,
                "blockEmailSubaddresses", blockEmailSubaddresses,
                "ignoreDotsForGmailAddresses", ignoreDotsForGmailAddresses);
    }
    
    public final static class Builder {
 
        private Optional<? extends InstanceRestrictionsObject> object = Optional.empty();
 
        private Optional<Boolean> allowlist = Optional.empty();
 
        private Optional<Boolean> blocklist = Optional.empty();
 
        private Optional<Boolean> blockEmailSubaddresses = Optional.empty();
 
        private Optional<Boolean> ignoreDotsForGmailAddresses = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(InstanceRestrictionsObject object) {
            Utils.checkNotNull(object, "object");
            this.object = Optional.ofNullable(object);
            return this;
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(Optional<? extends InstanceRestrictionsObject> object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }

        public Builder allowlist(boolean allowlist) {
            Utils.checkNotNull(allowlist, "allowlist");
            this.allowlist = Optional.ofNullable(allowlist);
            return this;
        }

        public Builder allowlist(Optional<Boolean> allowlist) {
            Utils.checkNotNull(allowlist, "allowlist");
            this.allowlist = allowlist;
            return this;
        }

        public Builder blocklist(boolean blocklist) {
            Utils.checkNotNull(blocklist, "blocklist");
            this.blocklist = Optional.ofNullable(blocklist);
            return this;
        }

        public Builder blocklist(Optional<Boolean> blocklist) {
            Utils.checkNotNull(blocklist, "blocklist");
            this.blocklist = blocklist;
            return this;
        }

        public Builder blockEmailSubaddresses(boolean blockEmailSubaddresses) {
            Utils.checkNotNull(blockEmailSubaddresses, "blockEmailSubaddresses");
            this.blockEmailSubaddresses = Optional.ofNullable(blockEmailSubaddresses);
            return this;
        }

        public Builder blockEmailSubaddresses(Optional<Boolean> blockEmailSubaddresses) {
            Utils.checkNotNull(blockEmailSubaddresses, "blockEmailSubaddresses");
            this.blockEmailSubaddresses = blockEmailSubaddresses;
            return this;
        }

        public Builder ignoreDotsForGmailAddresses(boolean ignoreDotsForGmailAddresses) {
            Utils.checkNotNull(ignoreDotsForGmailAddresses, "ignoreDotsForGmailAddresses");
            this.ignoreDotsForGmailAddresses = Optional.ofNullable(ignoreDotsForGmailAddresses);
            return this;
        }

        public Builder ignoreDotsForGmailAddresses(Optional<Boolean> ignoreDotsForGmailAddresses) {
            Utils.checkNotNull(ignoreDotsForGmailAddresses, "ignoreDotsForGmailAddresses");
            this.ignoreDotsForGmailAddresses = ignoreDotsForGmailAddresses;
            return this;
        }
        
        public InstanceRestrictions build() {
            return new InstanceRestrictions(
                object,
                allowlist,
                blocklist,
                blockEmailSubaddresses,
                ignoreDotsForGmailAddresses);
        }
    }
}

