/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;


import com.clerk.backend_api.utils.LazySingletonValue;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class UpdateUserRequestBody {

    /**
     * The ID of the user as used in your external systems or your previous authentication solution.
     * Must be unique across your instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_id")
    private JsonNullable<String> externalId;

    /**
     * The first name to assign to the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The last name to assign to the user
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * The ID of the email address to set as primary.
     * It must be verified, and present on the current user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_email_address_id")
    private Optional<String> primaryEmailAddressId;

    /**
     * If set to `true`, the user will be notified that their primary email address has changed.
     * By default, no notification is sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notify_primary_email_address_changed")
    private Optional<Boolean> notifyPrimaryEmailAddressChanged;

    /**
     * The ID of the phone number to set as primary.
     * It must be verified, and present on the current user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_phone_number_id")
    private Optional<String> primaryPhoneNumberId;

    /**
     * The ID of the web3 wallets to set as primary.
     * It must be verified, and present on the current user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_web3_wallet_id")
    private Optional<String> primaryWeb3WalletId;

    /**
     * The username to give to the user.
     * It must be unique across your instance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private JsonNullable<String> username;

    /**
     * The ID of the image to set as the user's profile image
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile_image_id")
    private JsonNullable<String> profileImageId;

    /**
     * The plaintext password to give the user.
     * Must be at least 8 characters long, and can not be in any list of hacked passwords.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    private JsonNullable<String> password;

    /**
     * In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.
     * The digests should be generated with one of the supported algorithms.
     * The hashing algorithm can be specified using the `password_hasher` property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_digest")
    private Optional<String> passwordDigest;

    /**
     * The hashing algorithm that was used to generate the password digest.
     * The algorithms we support at the moment are [bcrypt](https://en.wikipedia.org/wiki/Bcrypt), [bcrypt_sha256_django](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
     * [md5](https://en.wikipedia.org/wiki/MD5), pbkdf2_sha256, pbkdf2_sha512, [pbkdf2_sha256_django](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
     * [phpass](https://www.openwall.com/phpass/), [scrypt_firebase](https://firebaseopensource.com/projects/firebase/scrypt/),
     * [sha256](https://en.wikipedia.org/wiki/SHA-2), [scrypt_werkzeug](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash)
     * and the [argon2](https://argon2.online/) variants argon2i and argon2id.
     * 
     * If you need support for any particular hashing algorithm, [please let us know](https://clerk.com/support).
     * 
     * Note: for password hashers considered insecure (at this moment MD5 and SHA256), the corresponding user password hashes will be transparently migrated to Bcrypt (a secure hasher) upon the user's first successful password sign in.
     * Insecure schemes are marked with `(insecure)` in the list below.
     * 
     * Each of the supported hashers expects the incoming digest to be in a particular format. Specifically:
     * 
     * **bcrypt:** The digest should be of the following form:
     * 
     * `$&lt;algorithm version&gt;$&lt;cost&gt;$&lt;salt &amp; hash&gt;`
     * 
     * **bcrypt_sha256_django:** This is the Django-specific variant of Bcrypt, using SHA256 hashing function. The format should be as follows (as exported from Django):
     * 
     * `bcrypt_sha256$$&lt;algorithm version&gt;$&lt;cost&gt;$&lt;salt &amp; hash&gt;`
     * 
     * **md5** (insecure): The digest should follow the regular form e.g.:
     * 
     * `5f4dcc3b5aa765d61d8327deb882cf99`
     * 
     * **pbkdf2_sha256:** This is the PBKDF2 algorithm using the SHA256 hashing function. The format should be as follows:
     * 
     * `pbkdf2_sha256$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;`
     * 
     * Note: Both the salt and the hash are expected to be base64-encoded.
     * 
     * **pbkdf2_sha512:** This is the PBKDF2 algorithm using the SHA512 hashing function. The format should be as follows:
     * 
     * `pbkdf2_sha512$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;`
     * 
     *   _iterations:_ The number of iterations used. Must be an integer less than 420000.
     *   _salt:_ The salt used when generating the hash. Must be less than bytes.
     *   _hash:_ The hex-encoded hash. Must have been generated with a key length less than 1024 bytes.
     * 
     * **pbkdf2_sha256_django:** This is the Django-specific variant of PBKDF2 and the digest should have the following format (as exported from Django):
     * 
     * `pbkdf2_sha256$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;`
     * 
     * Note: The salt is expected to be un-encoded, the hash is expected base64-encoded.
     * 
     * **pbkdf2_sha1:** This is similar to pkbdf2_sha256_django, but with two differences:
     * 1. uses sha1 instead of sha256
     * 2. accepts the hash as a hex-encoded string
     * 
     * The format is the following:
     * 
     * `pbkdf2_sha1$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash-as-hex-string&gt;`
     * 
     * **phpass:** Portable public domain password hashing framework for use in PHP applications. Digests hashed with phpass have the following sections:
     * 
     * The format is the following:
     * 
     * `$P$&lt;rounds&gt;&lt;salt&gt;&lt;encoded-checksum&gt;`
     * 
     * - $P$ is the prefix used to identify phpass hashes.
     * - rounds is a single character encoding a 6-bit integer representing the number of rounds used.
     * - salt is eight characters drawn from [./0-9A-Za-z], providing a 48-bit salt.
     * - checksum is 22 characters drawn from the same set, encoding the 128-bit checksum with MD5.
     * 
     * **scrypt_firebase:** The Firebase-specific variant of scrypt.
     * The value is expected to have 6 segments separated by the $ character and include the following information:
     * 
     * _hash:_ The actual Base64 hash. This can be retrieved when exporting the user from Firebase.
     * _salt:_ The salt used to generate the above hash. Again, this is given when exporting the user.
     * _signer key:_ The base64 encoded signer key.
     * _salt separator:_ The base64 encoded salt separator.
     * _rounds:_ The number of rounds the algorithm needs to run.
     * _memory cost:_ The cost of the algorithm run
     * 
     * The first 2 (hash and salt) are per user and can be retrieved when exporting the user from Firebase.
     * The other 4 values (signer key, salt separator, rounds and memory cost) are project-wide settings and can be retrieved from the project's password hash parameters.
     * 
     * Once you have all these, you can combine it in the following format and send this as the digest in order for Clerk to accept it:
     * 
     * `&lt;hash&gt;$&lt;salt&gt;$&lt;signer key&gt;$&lt;salt separator&gt;$&lt;rounds&gt;$&lt;memory cost&gt;`
     * 
     * **scrypt_werkzeug:** The Werkzeug-specific variant of scrypt.
     * 
     * The value is expected to have 3 segments separated by the $ character and include the following information:
     * 
     * _algorithm args:_ The algorithm used to generate the hash.
     * _salt:_ The salt used to generate the above hash.
     * _hash:_ The actual Base64 hash.
     * 
     * The algorithm args are the parameters used to generate the hash and are included in the digest.
     * 
     * **argon2i:** Algorithms in the argon2 family generate digests that encode the following information:
     * 
     * _version (v):_ The argon version, version 19 is assumed
     * _memory (m):_ The memory used by the algorithm (in kibibytes)
     * _iterations (t):_ The number of iterations to perform
     * _parallelism (p):_ The number of threads to use
     * 
     * Parts are demarcated by the `$` character, with the first part identifying the algorithm variant.
     * The middle part is a comma-separated list of the encoding options (memory, iterations, parallelism).
     * The final part is the actual digest.
     * 
     * `$argon2i$v=19$m=4096,t=3,p=1$4t6CL3P7YiHBtwESXawI8Hm20zJj4cs7/4/G3c187e0$m7RQFczcKr5bIR0IIxbpO2P0tyrLjf3eUW3M3QSwnLc`
     * 
     * **argon2id:** See the previous algorithm for an explanation of the formatting.
     * 
     * For the argon2id case, the value of the algorithm in the first part of the digest is `argon2id`:
     * 
     * `$argon2id$v=19$m=64,t=4,p=8$Z2liZXJyaXNo$iGXEpMBTDYQ8G/71tF0qGjxRHEmR3gpGULcE93zUJVU`
     * 
     * **sha256** (insecure): The digest should be a 64-length hex string, e.g.:
     * 
     * `9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_hasher")
    private Optional<? extends UpdateUserPasswordHasher> passwordHasher;

    /**
     * Set it to `true` if you're updating the user's password and want to skip any password policy settings check. This parameter can only be used when providing a `password`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skip_password_checks")
    private JsonNullable<Boolean> skipPasswordChecks;

    /**
     * Set to `true` to sign out the user from all their active sessions once their password is updated. This parameter can only be used when providing a `password`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sign_out_of_other_sessions")
    private JsonNullable<Boolean> signOutOfOtherSessions;

    /**
     * In case TOTP is configured on the instance, you can provide the secret to enable it on the specific user without the need to reset it.
     * Please note that currently the supported options are:
     * * Period: 30 seconds
     * * Code length: 6 digits
     * * Algorithm: SHA1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totp_secret")
    private Optional<String> totpSecret;

    /**
     * If Backup Codes are configured on the instance, you can provide them to enable it on the specific user without the need to reset them.
     * You must provide the backup codes in plain format or the corresponding bcrypt digest.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backup_codes")
    private Optional<? extends List<String>> backupCodes;

    /**
     * Metadata saved on the user, that is visible to both your Frontend and Backend APIs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_metadata")
    private Optional<? extends UpdateUserPublicMetadata> publicMetadata;

    /**
     * Metadata saved on the user, that is only visible to your Backend API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private_metadata")
    private Optional<? extends UpdateUserPrivateMetadata> privateMetadata;

    /**
     * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
     * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unsafe_metadata")
    private Optional<? extends UpdateUserUnsafeMetadata> unsafeMetadata;

    /**
     * If true, the user can delete themselves with the Frontend API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delete_self_enabled")
    private JsonNullable<Boolean> deleteSelfEnabled;

    /**
     * If true, the user can create organizations with the Frontend API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("create_organization_enabled")
    private JsonNullable<Boolean> createOrganizationEnabled;

    /**
     * A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<String> createdAt;

    @JsonCreator
    public UpdateUserRequestBody(
            @JsonProperty("external_id") JsonNullable<String> externalId,
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("primary_email_address_id") Optional<String> primaryEmailAddressId,
            @JsonProperty("notify_primary_email_address_changed") Optional<Boolean> notifyPrimaryEmailAddressChanged,
            @JsonProperty("primary_phone_number_id") Optional<String> primaryPhoneNumberId,
            @JsonProperty("primary_web3_wallet_id") Optional<String> primaryWeb3WalletId,
            @JsonProperty("username") JsonNullable<String> username,
            @JsonProperty("profile_image_id") JsonNullable<String> profileImageId,
            @JsonProperty("password") JsonNullable<String> password,
            @JsonProperty("password_digest") Optional<String> passwordDigest,
            @JsonProperty("password_hasher") Optional<? extends UpdateUserPasswordHasher> passwordHasher,
            @JsonProperty("skip_password_checks") JsonNullable<Boolean> skipPasswordChecks,
            @JsonProperty("sign_out_of_other_sessions") JsonNullable<Boolean> signOutOfOtherSessions,
            @JsonProperty("totp_secret") Optional<String> totpSecret,
            @JsonProperty("backup_codes") Optional<? extends List<String>> backupCodes,
            @JsonProperty("public_metadata") Optional<? extends UpdateUserPublicMetadata> publicMetadata,
            @JsonProperty("private_metadata") Optional<? extends UpdateUserPrivateMetadata> privateMetadata,
            @JsonProperty("unsafe_metadata") Optional<? extends UpdateUserUnsafeMetadata> unsafeMetadata,
            @JsonProperty("delete_self_enabled") JsonNullable<Boolean> deleteSelfEnabled,
            @JsonProperty("create_organization_enabled") JsonNullable<Boolean> createOrganizationEnabled,
            @JsonProperty("created_at") Optional<String> createdAt) {
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
        Utils.checkNotNull(notifyPrimaryEmailAddressChanged, "notifyPrimaryEmailAddressChanged");
        Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
        Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(profileImageId, "profileImageId");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(passwordDigest, "passwordDigest");
        Utils.checkNotNull(passwordHasher, "passwordHasher");
        Utils.checkNotNull(skipPasswordChecks, "skipPasswordChecks");
        Utils.checkNotNull(signOutOfOtherSessions, "signOutOfOtherSessions");
        Utils.checkNotNull(totpSecret, "totpSecret");
        Utils.checkNotNull(backupCodes, "backupCodes");
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
        Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
        Utils.checkNotNull(createdAt, "createdAt");
        this.externalId = externalId;
        this.firstName = firstName;
        this.lastName = lastName;
        this.primaryEmailAddressId = primaryEmailAddressId;
        this.notifyPrimaryEmailAddressChanged = notifyPrimaryEmailAddressChanged;
        this.primaryPhoneNumberId = primaryPhoneNumberId;
        this.primaryWeb3WalletId = primaryWeb3WalletId;
        this.username = username;
        this.profileImageId = profileImageId;
        this.password = password;
        this.passwordDigest = passwordDigest;
        this.passwordHasher = passwordHasher;
        this.skipPasswordChecks = skipPasswordChecks;
        this.signOutOfOtherSessions = signOutOfOtherSessions;
        this.totpSecret = totpSecret;
        this.backupCodes = backupCodes;
        this.publicMetadata = publicMetadata;
        this.privateMetadata = privateMetadata;
        this.unsafeMetadata = unsafeMetadata;
        this.deleteSelfEnabled = deleteSelfEnabled;
        this.createOrganizationEnabled = createOrganizationEnabled;
        this.createdAt = createdAt;
    }
    
    public UpdateUserRequestBody() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The ID of the user as used in your external systems or your previous authentication solution.
     * Must be unique across your instance.
     */
    @JsonIgnore
    public JsonNullable<String> externalId() {
        return externalId;
    }

    /**
     * The first name to assign to the user
     */
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    /**
     * The last name to assign to the user
     */
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    /**
     * The ID of the email address to set as primary.
     * It must be verified, and present on the current user.
     */
    @JsonIgnore
    public Optional<String> primaryEmailAddressId() {
        return primaryEmailAddressId;
    }

    /**
     * If set to `true`, the user will be notified that their primary email address has changed.
     * By default, no notification is sent.
     */
    @JsonIgnore
    public Optional<Boolean> notifyPrimaryEmailAddressChanged() {
        return notifyPrimaryEmailAddressChanged;
    }

    /**
     * The ID of the phone number to set as primary.
     * It must be verified, and present on the current user.
     */
    @JsonIgnore
    public Optional<String> primaryPhoneNumberId() {
        return primaryPhoneNumberId;
    }

    /**
     * The ID of the web3 wallets to set as primary.
     * It must be verified, and present on the current user.
     */
    @JsonIgnore
    public Optional<String> primaryWeb3WalletId() {
        return primaryWeb3WalletId;
    }

    /**
     * The username to give to the user.
     * It must be unique across your instance.
     */
    @JsonIgnore
    public JsonNullable<String> username() {
        return username;
    }

    /**
     * The ID of the image to set as the user's profile image
     */
    @JsonIgnore
    public JsonNullable<String> profileImageId() {
        return profileImageId;
    }

    /**
     * The plaintext password to give the user.
     * Must be at least 8 characters long, and can not be in any list of hacked passwords.
     */
    @JsonIgnore
    public JsonNullable<String> password() {
        return password;
    }

    /**
     * In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.
     * The digests should be generated with one of the supported algorithms.
     * The hashing algorithm can be specified using the `password_hasher` property.
     */
    @JsonIgnore
    public Optional<String> passwordDigest() {
        return passwordDigest;
    }

    /**
     * The hashing algorithm that was used to generate the password digest.
     * The algorithms we support at the moment are [bcrypt](https://en.wikipedia.org/wiki/Bcrypt), [bcrypt_sha256_django](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
     * [md5](https://en.wikipedia.org/wiki/MD5), pbkdf2_sha256, pbkdf2_sha512, [pbkdf2_sha256_django](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
     * [phpass](https://www.openwall.com/phpass/), [scrypt_firebase](https://firebaseopensource.com/projects/firebase/scrypt/),
     * [sha256](https://en.wikipedia.org/wiki/SHA-2), [scrypt_werkzeug](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash)
     * and the [argon2](https://argon2.online/) variants argon2i and argon2id.
     * 
     * If you need support for any particular hashing algorithm, [please let us know](https://clerk.com/support).
     * 
     * Note: for password hashers considered insecure (at this moment MD5 and SHA256), the corresponding user password hashes will be transparently migrated to Bcrypt (a secure hasher) upon the user's first successful password sign in.
     * Insecure schemes are marked with `(insecure)` in the list below.
     * 
     * Each of the supported hashers expects the incoming digest to be in a particular format. Specifically:
     * 
     * **bcrypt:** The digest should be of the following form:
     * 
     * `$&lt;algorithm version&gt;$&lt;cost&gt;$&lt;salt &amp; hash&gt;`
     * 
     * **bcrypt_sha256_django:** This is the Django-specific variant of Bcrypt, using SHA256 hashing function. The format should be as follows (as exported from Django):
     * 
     * `bcrypt_sha256$$&lt;algorithm version&gt;$&lt;cost&gt;$&lt;salt &amp; hash&gt;`
     * 
     * **md5** (insecure): The digest should follow the regular form e.g.:
     * 
     * `5f4dcc3b5aa765d61d8327deb882cf99`
     * 
     * **pbkdf2_sha256:** This is the PBKDF2 algorithm using the SHA256 hashing function. The format should be as follows:
     * 
     * `pbkdf2_sha256$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;`
     * 
     * Note: Both the salt and the hash are expected to be base64-encoded.
     * 
     * **pbkdf2_sha512:** This is the PBKDF2 algorithm using the SHA512 hashing function. The format should be as follows:
     * 
     * `pbkdf2_sha512$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;`
     * 
     *   _iterations:_ The number of iterations used. Must be an integer less than 420000.
     *   _salt:_ The salt used when generating the hash. Must be less than bytes.
     *   _hash:_ The hex-encoded hash. Must have been generated with a key length less than 1024 bytes.
     * 
     * **pbkdf2_sha256_django:** This is the Django-specific variant of PBKDF2 and the digest should have the following format (as exported from Django):
     * 
     * `pbkdf2_sha256$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;`
     * 
     * Note: The salt is expected to be un-encoded, the hash is expected base64-encoded.
     * 
     * **pbkdf2_sha1:** This is similar to pkbdf2_sha256_django, but with two differences:
     * 1. uses sha1 instead of sha256
     * 2. accepts the hash as a hex-encoded string
     * 
     * The format is the following:
     * 
     * `pbkdf2_sha1$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash-as-hex-string&gt;`
     * 
     * **phpass:** Portable public domain password hashing framework for use in PHP applications. Digests hashed with phpass have the following sections:
     * 
     * The format is the following:
     * 
     * `$P$&lt;rounds&gt;&lt;salt&gt;&lt;encoded-checksum&gt;`
     * 
     * - $P$ is the prefix used to identify phpass hashes.
     * - rounds is a single character encoding a 6-bit integer representing the number of rounds used.
     * - salt is eight characters drawn from [./0-9A-Za-z], providing a 48-bit salt.
     * - checksum is 22 characters drawn from the same set, encoding the 128-bit checksum with MD5.
     * 
     * **scrypt_firebase:** The Firebase-specific variant of scrypt.
     * The value is expected to have 6 segments separated by the $ character and include the following information:
     * 
     * _hash:_ The actual Base64 hash. This can be retrieved when exporting the user from Firebase.
     * _salt:_ The salt used to generate the above hash. Again, this is given when exporting the user.
     * _signer key:_ The base64 encoded signer key.
     * _salt separator:_ The base64 encoded salt separator.
     * _rounds:_ The number of rounds the algorithm needs to run.
     * _memory cost:_ The cost of the algorithm run
     * 
     * The first 2 (hash and salt) are per user and can be retrieved when exporting the user from Firebase.
     * The other 4 values (signer key, salt separator, rounds and memory cost) are project-wide settings and can be retrieved from the project's password hash parameters.
     * 
     * Once you have all these, you can combine it in the following format and send this as the digest in order for Clerk to accept it:
     * 
     * `&lt;hash&gt;$&lt;salt&gt;$&lt;signer key&gt;$&lt;salt separator&gt;$&lt;rounds&gt;$&lt;memory cost&gt;`
     * 
     * **scrypt_werkzeug:** The Werkzeug-specific variant of scrypt.
     * 
     * The value is expected to have 3 segments separated by the $ character and include the following information:
     * 
     * _algorithm args:_ The algorithm used to generate the hash.
     * _salt:_ The salt used to generate the above hash.
     * _hash:_ The actual Base64 hash.
     * 
     * The algorithm args are the parameters used to generate the hash and are included in the digest.
     * 
     * **argon2i:** Algorithms in the argon2 family generate digests that encode the following information:
     * 
     * _version (v):_ The argon version, version 19 is assumed
     * _memory (m):_ The memory used by the algorithm (in kibibytes)
     * _iterations (t):_ The number of iterations to perform
     * _parallelism (p):_ The number of threads to use
     * 
     * Parts are demarcated by the `$` character, with the first part identifying the algorithm variant.
     * The middle part is a comma-separated list of the encoding options (memory, iterations, parallelism).
     * The final part is the actual digest.
     * 
     * `$argon2i$v=19$m=4096,t=3,p=1$4t6CL3P7YiHBtwESXawI8Hm20zJj4cs7/4/G3c187e0$m7RQFczcKr5bIR0IIxbpO2P0tyrLjf3eUW3M3QSwnLc`
     * 
     * **argon2id:** See the previous algorithm for an explanation of the formatting.
     * 
     * For the argon2id case, the value of the algorithm in the first part of the digest is `argon2id`:
     * 
     * `$argon2id$v=19$m=64,t=4,p=8$Z2liZXJyaXNo$iGXEpMBTDYQ8G/71tF0qGjxRHEmR3gpGULcE93zUJVU`
     * 
     * **sha256** (insecure): The digest should be a 64-length hex string, e.g.:
     * 
     * `9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08`
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdateUserPasswordHasher> passwordHasher() {
        return (Optional<UpdateUserPasswordHasher>) passwordHasher;
    }

    /**
     * Set it to `true` if you're updating the user's password and want to skip any password policy settings check. This parameter can only be used when providing a `password`.
     */
    @JsonIgnore
    public JsonNullable<Boolean> skipPasswordChecks() {
        return skipPasswordChecks;
    }

    /**
     * Set to `true` to sign out the user from all their active sessions once their password is updated. This parameter can only be used when providing a `password`.
     */
    @JsonIgnore
    public JsonNullable<Boolean> signOutOfOtherSessions() {
        return signOutOfOtherSessions;
    }

    /**
     * In case TOTP is configured on the instance, you can provide the secret to enable it on the specific user without the need to reset it.
     * Please note that currently the supported options are:
     * * Period: 30 seconds
     * * Code length: 6 digits
     * * Algorithm: SHA1
     */
    @JsonIgnore
    public Optional<String> totpSecret() {
        return totpSecret;
    }

    /**
     * If Backup Codes are configured on the instance, you can provide them to enable it on the specific user without the need to reset them.
     * You must provide the backup codes in plain format or the corresponding bcrypt digest.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> backupCodes() {
        return (Optional<List<String>>) backupCodes;
    }

    /**
     * Metadata saved on the user, that is visible to both your Frontend and Backend APIs
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdateUserPublicMetadata> publicMetadata() {
        return (Optional<UpdateUserPublicMetadata>) publicMetadata;
    }

    /**
     * Metadata saved on the user, that is only visible to your Backend API
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdateUserPrivateMetadata> privateMetadata() {
        return (Optional<UpdateUserPrivateMetadata>) privateMetadata;
    }

    /**
     * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
     * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdateUserUnsafeMetadata> unsafeMetadata() {
        return (Optional<UpdateUserUnsafeMetadata>) unsafeMetadata;
    }

    /**
     * If true, the user can delete themselves with the Frontend API.
     */
    @JsonIgnore
    public JsonNullable<Boolean> deleteSelfEnabled() {
        return deleteSelfEnabled;
    }

    /**
     * If true, the user can create organizations with the Frontend API.
     */
    @JsonIgnore
    public JsonNullable<Boolean> createOrganizationEnabled() {
        return createOrganizationEnabled;
    }

    /**
     * A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the user as used in your external systems or your previous authentication solution.
     * Must be unique across your instance.
     */
    public UpdateUserRequestBody withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = JsonNullable.of(externalId);
        return this;
    }

    /**
     * The ID of the user as used in your external systems or your previous authentication solution.
     * Must be unique across your instance.
     */
    public UpdateUserRequestBody withExternalId(JsonNullable<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * The first name to assign to the user
     */
    public UpdateUserRequestBody withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * The first name to assign to the user
     */
    public UpdateUserRequestBody withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The last name to assign to the user
     */
    public UpdateUserRequestBody withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * The last name to assign to the user
     */
    public UpdateUserRequestBody withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * The ID of the email address to set as primary.
     * It must be verified, and present on the current user.
     */
    public UpdateUserRequestBody withPrimaryEmailAddressId(String primaryEmailAddressId) {
        Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
        this.primaryEmailAddressId = Optional.ofNullable(primaryEmailAddressId);
        return this;
    }

    /**
     * The ID of the email address to set as primary.
     * It must be verified, and present on the current user.
     */
    public UpdateUserRequestBody withPrimaryEmailAddressId(Optional<String> primaryEmailAddressId) {
        Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
        this.primaryEmailAddressId = primaryEmailAddressId;
        return this;
    }

    /**
     * If set to `true`, the user will be notified that their primary email address has changed.
     * By default, no notification is sent.
     */
    public UpdateUserRequestBody withNotifyPrimaryEmailAddressChanged(boolean notifyPrimaryEmailAddressChanged) {
        Utils.checkNotNull(notifyPrimaryEmailAddressChanged, "notifyPrimaryEmailAddressChanged");
        this.notifyPrimaryEmailAddressChanged = Optional.ofNullable(notifyPrimaryEmailAddressChanged);
        return this;
    }

    /**
     * If set to `true`, the user will be notified that their primary email address has changed.
     * By default, no notification is sent.
     */
    public UpdateUserRequestBody withNotifyPrimaryEmailAddressChanged(Optional<Boolean> notifyPrimaryEmailAddressChanged) {
        Utils.checkNotNull(notifyPrimaryEmailAddressChanged, "notifyPrimaryEmailAddressChanged");
        this.notifyPrimaryEmailAddressChanged = notifyPrimaryEmailAddressChanged;
        return this;
    }

    /**
     * The ID of the phone number to set as primary.
     * It must be verified, and present on the current user.
     */
    public UpdateUserRequestBody withPrimaryPhoneNumberId(String primaryPhoneNumberId) {
        Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
        this.primaryPhoneNumberId = Optional.ofNullable(primaryPhoneNumberId);
        return this;
    }

    /**
     * The ID of the phone number to set as primary.
     * It must be verified, and present on the current user.
     */
    public UpdateUserRequestBody withPrimaryPhoneNumberId(Optional<String> primaryPhoneNumberId) {
        Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
        this.primaryPhoneNumberId = primaryPhoneNumberId;
        return this;
    }

    /**
     * The ID of the web3 wallets to set as primary.
     * It must be verified, and present on the current user.
     */
    public UpdateUserRequestBody withPrimaryWeb3WalletId(String primaryWeb3WalletId) {
        Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
        this.primaryWeb3WalletId = Optional.ofNullable(primaryWeb3WalletId);
        return this;
    }

    /**
     * The ID of the web3 wallets to set as primary.
     * It must be verified, and present on the current user.
     */
    public UpdateUserRequestBody withPrimaryWeb3WalletId(Optional<String> primaryWeb3WalletId) {
        Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
        this.primaryWeb3WalletId = primaryWeb3WalletId;
        return this;
    }

    /**
     * The username to give to the user.
     * It must be unique across your instance.
     */
    public UpdateUserRequestBody withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = JsonNullable.of(username);
        return this;
    }

    /**
     * The username to give to the user.
     * It must be unique across your instance.
     */
    public UpdateUserRequestBody withUsername(JsonNullable<String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    /**
     * The ID of the image to set as the user's profile image
     */
    public UpdateUserRequestBody withProfileImageId(String profileImageId) {
        Utils.checkNotNull(profileImageId, "profileImageId");
        this.profileImageId = JsonNullable.of(profileImageId);
        return this;
    }

    /**
     * The ID of the image to set as the user's profile image
     */
    public UpdateUserRequestBody withProfileImageId(JsonNullable<String> profileImageId) {
        Utils.checkNotNull(profileImageId, "profileImageId");
        this.profileImageId = profileImageId;
        return this;
    }

    /**
     * The plaintext password to give the user.
     * Must be at least 8 characters long, and can not be in any list of hacked passwords.
     */
    public UpdateUserRequestBody withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = JsonNullable.of(password);
        return this;
    }

    /**
     * The plaintext password to give the user.
     * Must be at least 8 characters long, and can not be in any list of hacked passwords.
     */
    public UpdateUserRequestBody withPassword(JsonNullable<String> password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    /**
     * In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.
     * The digests should be generated with one of the supported algorithms.
     * The hashing algorithm can be specified using the `password_hasher` property.
     */
    public UpdateUserRequestBody withPasswordDigest(String passwordDigest) {
        Utils.checkNotNull(passwordDigest, "passwordDigest");
        this.passwordDigest = Optional.ofNullable(passwordDigest);
        return this;
    }

    /**
     * In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.
     * The digests should be generated with one of the supported algorithms.
     * The hashing algorithm can be specified using the `password_hasher` property.
     */
    public UpdateUserRequestBody withPasswordDigest(Optional<String> passwordDigest) {
        Utils.checkNotNull(passwordDigest, "passwordDigest");
        this.passwordDigest = passwordDigest;
        return this;
    }

    /**
     * The hashing algorithm that was used to generate the password digest.
     * The algorithms we support at the moment are [bcrypt](https://en.wikipedia.org/wiki/Bcrypt), [bcrypt_sha256_django](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
     * [md5](https://en.wikipedia.org/wiki/MD5), pbkdf2_sha256, pbkdf2_sha512, [pbkdf2_sha256_django](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
     * [phpass](https://www.openwall.com/phpass/), [scrypt_firebase](https://firebaseopensource.com/projects/firebase/scrypt/),
     * [sha256](https://en.wikipedia.org/wiki/SHA-2), [scrypt_werkzeug](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash)
     * and the [argon2](https://argon2.online/) variants argon2i and argon2id.
     * 
     * If you need support for any particular hashing algorithm, [please let us know](https://clerk.com/support).
     * 
     * Note: for password hashers considered insecure (at this moment MD5 and SHA256), the corresponding user password hashes will be transparently migrated to Bcrypt (a secure hasher) upon the user's first successful password sign in.
     * Insecure schemes are marked with `(insecure)` in the list below.
     * 
     * Each of the supported hashers expects the incoming digest to be in a particular format. Specifically:
     * 
     * **bcrypt:** The digest should be of the following form:
     * 
     * `$&lt;algorithm version&gt;$&lt;cost&gt;$&lt;salt &amp; hash&gt;`
     * 
     * **bcrypt_sha256_django:** This is the Django-specific variant of Bcrypt, using SHA256 hashing function. The format should be as follows (as exported from Django):
     * 
     * `bcrypt_sha256$$&lt;algorithm version&gt;$&lt;cost&gt;$&lt;salt &amp; hash&gt;`
     * 
     * **md5** (insecure): The digest should follow the regular form e.g.:
     * 
     * `5f4dcc3b5aa765d61d8327deb882cf99`
     * 
     * **pbkdf2_sha256:** This is the PBKDF2 algorithm using the SHA256 hashing function. The format should be as follows:
     * 
     * `pbkdf2_sha256$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;`
     * 
     * Note: Both the salt and the hash are expected to be base64-encoded.
     * 
     * **pbkdf2_sha512:** This is the PBKDF2 algorithm using the SHA512 hashing function. The format should be as follows:
     * 
     * `pbkdf2_sha512$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;`
     * 
     *   _iterations:_ The number of iterations used. Must be an integer less than 420000.
     *   _salt:_ The salt used when generating the hash. Must be less than bytes.
     *   _hash:_ The hex-encoded hash. Must have been generated with a key length less than 1024 bytes.
     * 
     * **pbkdf2_sha256_django:** This is the Django-specific variant of PBKDF2 and the digest should have the following format (as exported from Django):
     * 
     * `pbkdf2_sha256$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;`
     * 
     * Note: The salt is expected to be un-encoded, the hash is expected base64-encoded.
     * 
     * **pbkdf2_sha1:** This is similar to pkbdf2_sha256_django, but with two differences:
     * 1. uses sha1 instead of sha256
     * 2. accepts the hash as a hex-encoded string
     * 
     * The format is the following:
     * 
     * `pbkdf2_sha1$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash-as-hex-string&gt;`
     * 
     * **phpass:** Portable public domain password hashing framework for use in PHP applications. Digests hashed with phpass have the following sections:
     * 
     * The format is the following:
     * 
     * `$P$&lt;rounds&gt;&lt;salt&gt;&lt;encoded-checksum&gt;`
     * 
     * - $P$ is the prefix used to identify phpass hashes.
     * - rounds is a single character encoding a 6-bit integer representing the number of rounds used.
     * - salt is eight characters drawn from [./0-9A-Za-z], providing a 48-bit salt.
     * - checksum is 22 characters drawn from the same set, encoding the 128-bit checksum with MD5.
     * 
     * **scrypt_firebase:** The Firebase-specific variant of scrypt.
     * The value is expected to have 6 segments separated by the $ character and include the following information:
     * 
     * _hash:_ The actual Base64 hash. This can be retrieved when exporting the user from Firebase.
     * _salt:_ The salt used to generate the above hash. Again, this is given when exporting the user.
     * _signer key:_ The base64 encoded signer key.
     * _salt separator:_ The base64 encoded salt separator.
     * _rounds:_ The number of rounds the algorithm needs to run.
     * _memory cost:_ The cost of the algorithm run
     * 
     * The first 2 (hash and salt) are per user and can be retrieved when exporting the user from Firebase.
     * The other 4 values (signer key, salt separator, rounds and memory cost) are project-wide settings and can be retrieved from the project's password hash parameters.
     * 
     * Once you have all these, you can combine it in the following format and send this as the digest in order for Clerk to accept it:
     * 
     * `&lt;hash&gt;$&lt;salt&gt;$&lt;signer key&gt;$&lt;salt separator&gt;$&lt;rounds&gt;$&lt;memory cost&gt;`
     * 
     * **scrypt_werkzeug:** The Werkzeug-specific variant of scrypt.
     * 
     * The value is expected to have 3 segments separated by the $ character and include the following information:
     * 
     * _algorithm args:_ The algorithm used to generate the hash.
     * _salt:_ The salt used to generate the above hash.
     * _hash:_ The actual Base64 hash.
     * 
     * The algorithm args are the parameters used to generate the hash and are included in the digest.
     * 
     * **argon2i:** Algorithms in the argon2 family generate digests that encode the following information:
     * 
     * _version (v):_ The argon version, version 19 is assumed
     * _memory (m):_ The memory used by the algorithm (in kibibytes)
     * _iterations (t):_ The number of iterations to perform
     * _parallelism (p):_ The number of threads to use
     * 
     * Parts are demarcated by the `$` character, with the first part identifying the algorithm variant.
     * The middle part is a comma-separated list of the encoding options (memory, iterations, parallelism).
     * The final part is the actual digest.
     * 
     * `$argon2i$v=19$m=4096,t=3,p=1$4t6CL3P7YiHBtwESXawI8Hm20zJj4cs7/4/G3c187e0$m7RQFczcKr5bIR0IIxbpO2P0tyrLjf3eUW3M3QSwnLc`
     * 
     * **argon2id:** See the previous algorithm for an explanation of the formatting.
     * 
     * For the argon2id case, the value of the algorithm in the first part of the digest is `argon2id`:
     * 
     * `$argon2id$v=19$m=64,t=4,p=8$Z2liZXJyaXNo$iGXEpMBTDYQ8G/71tF0qGjxRHEmR3gpGULcE93zUJVU`
     * 
     * **sha256** (insecure): The digest should be a 64-length hex string, e.g.:
     * 
     * `9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08`
     */
    public UpdateUserRequestBody withPasswordHasher(UpdateUserPasswordHasher passwordHasher) {
        Utils.checkNotNull(passwordHasher, "passwordHasher");
        this.passwordHasher = Optional.ofNullable(passwordHasher);
        return this;
    }

    /**
     * The hashing algorithm that was used to generate the password digest.
     * The algorithms we support at the moment are [bcrypt](https://en.wikipedia.org/wiki/Bcrypt), [bcrypt_sha256_django](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
     * [md5](https://en.wikipedia.org/wiki/MD5), pbkdf2_sha256, pbkdf2_sha512, [pbkdf2_sha256_django](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
     * [phpass](https://www.openwall.com/phpass/), [scrypt_firebase](https://firebaseopensource.com/projects/firebase/scrypt/),
     * [sha256](https://en.wikipedia.org/wiki/SHA-2), [scrypt_werkzeug](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash)
     * and the [argon2](https://argon2.online/) variants argon2i and argon2id.
     * 
     * If you need support for any particular hashing algorithm, [please let us know](https://clerk.com/support).
     * 
     * Note: for password hashers considered insecure (at this moment MD5 and SHA256), the corresponding user password hashes will be transparently migrated to Bcrypt (a secure hasher) upon the user's first successful password sign in.
     * Insecure schemes are marked with `(insecure)` in the list below.
     * 
     * Each of the supported hashers expects the incoming digest to be in a particular format. Specifically:
     * 
     * **bcrypt:** The digest should be of the following form:
     * 
     * `$&lt;algorithm version&gt;$&lt;cost&gt;$&lt;salt &amp; hash&gt;`
     * 
     * **bcrypt_sha256_django:** This is the Django-specific variant of Bcrypt, using SHA256 hashing function. The format should be as follows (as exported from Django):
     * 
     * `bcrypt_sha256$$&lt;algorithm version&gt;$&lt;cost&gt;$&lt;salt &amp; hash&gt;`
     * 
     * **md5** (insecure): The digest should follow the regular form e.g.:
     * 
     * `5f4dcc3b5aa765d61d8327deb882cf99`
     * 
     * **pbkdf2_sha256:** This is the PBKDF2 algorithm using the SHA256 hashing function. The format should be as follows:
     * 
     * `pbkdf2_sha256$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;`
     * 
     * Note: Both the salt and the hash are expected to be base64-encoded.
     * 
     * **pbkdf2_sha512:** This is the PBKDF2 algorithm using the SHA512 hashing function. The format should be as follows:
     * 
     * `pbkdf2_sha512$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;`
     * 
     *   _iterations:_ The number of iterations used. Must be an integer less than 420000.
     *   _salt:_ The salt used when generating the hash. Must be less than bytes.
     *   _hash:_ The hex-encoded hash. Must have been generated with a key length less than 1024 bytes.
     * 
     * **pbkdf2_sha256_django:** This is the Django-specific variant of PBKDF2 and the digest should have the following format (as exported from Django):
     * 
     * `pbkdf2_sha256$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;`
     * 
     * Note: The salt is expected to be un-encoded, the hash is expected base64-encoded.
     * 
     * **pbkdf2_sha1:** This is similar to pkbdf2_sha256_django, but with two differences:
     * 1. uses sha1 instead of sha256
     * 2. accepts the hash as a hex-encoded string
     * 
     * The format is the following:
     * 
     * `pbkdf2_sha1$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash-as-hex-string&gt;`
     * 
     * **phpass:** Portable public domain password hashing framework for use in PHP applications. Digests hashed with phpass have the following sections:
     * 
     * The format is the following:
     * 
     * `$P$&lt;rounds&gt;&lt;salt&gt;&lt;encoded-checksum&gt;`
     * 
     * - $P$ is the prefix used to identify phpass hashes.
     * - rounds is a single character encoding a 6-bit integer representing the number of rounds used.
     * - salt is eight characters drawn from [./0-9A-Za-z], providing a 48-bit salt.
     * - checksum is 22 characters drawn from the same set, encoding the 128-bit checksum with MD5.
     * 
     * **scrypt_firebase:** The Firebase-specific variant of scrypt.
     * The value is expected to have 6 segments separated by the $ character and include the following information:
     * 
     * _hash:_ The actual Base64 hash. This can be retrieved when exporting the user from Firebase.
     * _salt:_ The salt used to generate the above hash. Again, this is given when exporting the user.
     * _signer key:_ The base64 encoded signer key.
     * _salt separator:_ The base64 encoded salt separator.
     * _rounds:_ The number of rounds the algorithm needs to run.
     * _memory cost:_ The cost of the algorithm run
     * 
     * The first 2 (hash and salt) are per user and can be retrieved when exporting the user from Firebase.
     * The other 4 values (signer key, salt separator, rounds and memory cost) are project-wide settings and can be retrieved from the project's password hash parameters.
     * 
     * Once you have all these, you can combine it in the following format and send this as the digest in order for Clerk to accept it:
     * 
     * `&lt;hash&gt;$&lt;salt&gt;$&lt;signer key&gt;$&lt;salt separator&gt;$&lt;rounds&gt;$&lt;memory cost&gt;`
     * 
     * **scrypt_werkzeug:** The Werkzeug-specific variant of scrypt.
     * 
     * The value is expected to have 3 segments separated by the $ character and include the following information:
     * 
     * _algorithm args:_ The algorithm used to generate the hash.
     * _salt:_ The salt used to generate the above hash.
     * _hash:_ The actual Base64 hash.
     * 
     * The algorithm args are the parameters used to generate the hash and are included in the digest.
     * 
     * **argon2i:** Algorithms in the argon2 family generate digests that encode the following information:
     * 
     * _version (v):_ The argon version, version 19 is assumed
     * _memory (m):_ The memory used by the algorithm (in kibibytes)
     * _iterations (t):_ The number of iterations to perform
     * _parallelism (p):_ The number of threads to use
     * 
     * Parts are demarcated by the `$` character, with the first part identifying the algorithm variant.
     * The middle part is a comma-separated list of the encoding options (memory, iterations, parallelism).
     * The final part is the actual digest.
     * 
     * `$argon2i$v=19$m=4096,t=3,p=1$4t6CL3P7YiHBtwESXawI8Hm20zJj4cs7/4/G3c187e0$m7RQFczcKr5bIR0IIxbpO2P0tyrLjf3eUW3M3QSwnLc`
     * 
     * **argon2id:** See the previous algorithm for an explanation of the formatting.
     * 
     * For the argon2id case, the value of the algorithm in the first part of the digest is `argon2id`:
     * 
     * `$argon2id$v=19$m=64,t=4,p=8$Z2liZXJyaXNo$iGXEpMBTDYQ8G/71tF0qGjxRHEmR3gpGULcE93zUJVU`
     * 
     * **sha256** (insecure): The digest should be a 64-length hex string, e.g.:
     * 
     * `9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08`
     */
    public UpdateUserRequestBody withPasswordHasher(Optional<? extends UpdateUserPasswordHasher> passwordHasher) {
        Utils.checkNotNull(passwordHasher, "passwordHasher");
        this.passwordHasher = passwordHasher;
        return this;
    }

    /**
     * Set it to `true` if you're updating the user's password and want to skip any password policy settings check. This parameter can only be used when providing a `password`.
     */
    public UpdateUserRequestBody withSkipPasswordChecks(boolean skipPasswordChecks) {
        Utils.checkNotNull(skipPasswordChecks, "skipPasswordChecks");
        this.skipPasswordChecks = JsonNullable.of(skipPasswordChecks);
        return this;
    }

    /**
     * Set it to `true` if you're updating the user's password and want to skip any password policy settings check. This parameter can only be used when providing a `password`.
     */
    public UpdateUserRequestBody withSkipPasswordChecks(JsonNullable<Boolean> skipPasswordChecks) {
        Utils.checkNotNull(skipPasswordChecks, "skipPasswordChecks");
        this.skipPasswordChecks = skipPasswordChecks;
        return this;
    }

    /**
     * Set to `true` to sign out the user from all their active sessions once their password is updated. This parameter can only be used when providing a `password`.
     */
    public UpdateUserRequestBody withSignOutOfOtherSessions(boolean signOutOfOtherSessions) {
        Utils.checkNotNull(signOutOfOtherSessions, "signOutOfOtherSessions");
        this.signOutOfOtherSessions = JsonNullable.of(signOutOfOtherSessions);
        return this;
    }

    /**
     * Set to `true` to sign out the user from all their active sessions once their password is updated. This parameter can only be used when providing a `password`.
     */
    public UpdateUserRequestBody withSignOutOfOtherSessions(JsonNullable<Boolean> signOutOfOtherSessions) {
        Utils.checkNotNull(signOutOfOtherSessions, "signOutOfOtherSessions");
        this.signOutOfOtherSessions = signOutOfOtherSessions;
        return this;
    }

    /**
     * In case TOTP is configured on the instance, you can provide the secret to enable it on the specific user without the need to reset it.
     * Please note that currently the supported options are:
     * * Period: 30 seconds
     * * Code length: 6 digits
     * * Algorithm: SHA1
     */
    public UpdateUserRequestBody withTotpSecret(String totpSecret) {
        Utils.checkNotNull(totpSecret, "totpSecret");
        this.totpSecret = Optional.ofNullable(totpSecret);
        return this;
    }

    /**
     * In case TOTP is configured on the instance, you can provide the secret to enable it on the specific user without the need to reset it.
     * Please note that currently the supported options are:
     * * Period: 30 seconds
     * * Code length: 6 digits
     * * Algorithm: SHA1
     */
    public UpdateUserRequestBody withTotpSecret(Optional<String> totpSecret) {
        Utils.checkNotNull(totpSecret, "totpSecret");
        this.totpSecret = totpSecret;
        return this;
    }

    /**
     * If Backup Codes are configured on the instance, you can provide them to enable it on the specific user without the need to reset them.
     * You must provide the backup codes in plain format or the corresponding bcrypt digest.
     */
    public UpdateUserRequestBody withBackupCodes(List<String> backupCodes) {
        Utils.checkNotNull(backupCodes, "backupCodes");
        this.backupCodes = Optional.ofNullable(backupCodes);
        return this;
    }

    /**
     * If Backup Codes are configured on the instance, you can provide them to enable it on the specific user without the need to reset them.
     * You must provide the backup codes in plain format or the corresponding bcrypt digest.
     */
    public UpdateUserRequestBody withBackupCodes(Optional<? extends List<String>> backupCodes) {
        Utils.checkNotNull(backupCodes, "backupCodes");
        this.backupCodes = backupCodes;
        return this;
    }

    /**
     * Metadata saved on the user, that is visible to both your Frontend and Backend APIs
     */
    public UpdateUserRequestBody withPublicMetadata(UpdateUserPublicMetadata publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = Optional.ofNullable(publicMetadata);
        return this;
    }

    /**
     * Metadata saved on the user, that is visible to both your Frontend and Backend APIs
     */
    public UpdateUserRequestBody withPublicMetadata(Optional<? extends UpdateUserPublicMetadata> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = publicMetadata;
        return this;
    }

    /**
     * Metadata saved on the user, that is only visible to your Backend API
     */
    public UpdateUserRequestBody withPrivateMetadata(UpdateUserPrivateMetadata privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = Optional.ofNullable(privateMetadata);
        return this;
    }

    /**
     * Metadata saved on the user, that is only visible to your Backend API
     */
    public UpdateUserRequestBody withPrivateMetadata(Optional<? extends UpdateUserPrivateMetadata> privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = privateMetadata;
        return this;
    }

    /**
     * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
     * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
     */
    public UpdateUserRequestBody withUnsafeMetadata(UpdateUserUnsafeMetadata unsafeMetadata) {
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        this.unsafeMetadata = Optional.ofNullable(unsafeMetadata);
        return this;
    }

    /**
     * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
     * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
     */
    public UpdateUserRequestBody withUnsafeMetadata(Optional<? extends UpdateUserUnsafeMetadata> unsafeMetadata) {
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        this.unsafeMetadata = unsafeMetadata;
        return this;
    }

    /**
     * If true, the user can delete themselves with the Frontend API.
     */
    public UpdateUserRequestBody withDeleteSelfEnabled(boolean deleteSelfEnabled) {
        Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
        this.deleteSelfEnabled = JsonNullable.of(deleteSelfEnabled);
        return this;
    }

    /**
     * If true, the user can delete themselves with the Frontend API.
     */
    public UpdateUserRequestBody withDeleteSelfEnabled(JsonNullable<Boolean> deleteSelfEnabled) {
        Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
        this.deleteSelfEnabled = deleteSelfEnabled;
        return this;
    }

    /**
     * If true, the user can create organizations with the Frontend API.
     */
    public UpdateUserRequestBody withCreateOrganizationEnabled(boolean createOrganizationEnabled) {
        Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
        this.createOrganizationEnabled = JsonNullable.of(createOrganizationEnabled);
        return this;
    }

    /**
     * If true, the user can create organizations with the Frontend API.
     */
    public UpdateUserRequestBody withCreateOrganizationEnabled(JsonNullable<Boolean> createOrganizationEnabled) {
        Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
        this.createOrganizationEnabled = createOrganizationEnabled;
        return this;
    }

    /**
     * A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
     */
    public UpdateUserRequestBody withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
     */
    public UpdateUserRequestBody withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateUserRequestBody other = (UpdateUserRequestBody) o;
        return 
            Objects.deepEquals(this.externalId, other.externalId) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.primaryEmailAddressId, other.primaryEmailAddressId) &&
            Objects.deepEquals(this.notifyPrimaryEmailAddressChanged, other.notifyPrimaryEmailAddressChanged) &&
            Objects.deepEquals(this.primaryPhoneNumberId, other.primaryPhoneNumberId) &&
            Objects.deepEquals(this.primaryWeb3WalletId, other.primaryWeb3WalletId) &&
            Objects.deepEquals(this.username, other.username) &&
            Objects.deepEquals(this.profileImageId, other.profileImageId) &&
            Objects.deepEquals(this.password, other.password) &&
            Objects.deepEquals(this.passwordDigest, other.passwordDigest) &&
            Objects.deepEquals(this.passwordHasher, other.passwordHasher) &&
            Objects.deepEquals(this.skipPasswordChecks, other.skipPasswordChecks) &&
            Objects.deepEquals(this.signOutOfOtherSessions, other.signOutOfOtherSessions) &&
            Objects.deepEquals(this.totpSecret, other.totpSecret) &&
            Objects.deepEquals(this.backupCodes, other.backupCodes) &&
            Objects.deepEquals(this.publicMetadata, other.publicMetadata) &&
            Objects.deepEquals(this.privateMetadata, other.privateMetadata) &&
            Objects.deepEquals(this.unsafeMetadata, other.unsafeMetadata) &&
            Objects.deepEquals(this.deleteSelfEnabled, other.deleteSelfEnabled) &&
            Objects.deepEquals(this.createOrganizationEnabled, other.createOrganizationEnabled) &&
            Objects.deepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            externalId,
            firstName,
            lastName,
            primaryEmailAddressId,
            notifyPrimaryEmailAddressChanged,
            primaryPhoneNumberId,
            primaryWeb3WalletId,
            username,
            profileImageId,
            password,
            passwordDigest,
            passwordHasher,
            skipPasswordChecks,
            signOutOfOtherSessions,
            totpSecret,
            backupCodes,
            publicMetadata,
            privateMetadata,
            unsafeMetadata,
            deleteSelfEnabled,
            createOrganizationEnabled,
            createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateUserRequestBody.class,
                "externalId", externalId,
                "firstName", firstName,
                "lastName", lastName,
                "primaryEmailAddressId", primaryEmailAddressId,
                "notifyPrimaryEmailAddressChanged", notifyPrimaryEmailAddressChanged,
                "primaryPhoneNumberId", primaryPhoneNumberId,
                "primaryWeb3WalletId", primaryWeb3WalletId,
                "username", username,
                "profileImageId", profileImageId,
                "password", password,
                "passwordDigest", passwordDigest,
                "passwordHasher", passwordHasher,
                "skipPasswordChecks", skipPasswordChecks,
                "signOutOfOtherSessions", signOutOfOtherSessions,
                "totpSecret", totpSecret,
                "backupCodes", backupCodes,
                "publicMetadata", publicMetadata,
                "privateMetadata", privateMetadata,
                "unsafeMetadata", unsafeMetadata,
                "deleteSelfEnabled", deleteSelfEnabled,
                "createOrganizationEnabled", createOrganizationEnabled,
                "createdAt", createdAt);
    }
    
    public final static class Builder {
 
        private JsonNullable<String> externalId = JsonNullable.undefined();
 
        private JsonNullable<String> firstName = JsonNullable.undefined();
 
        private JsonNullable<String> lastName = JsonNullable.undefined();
 
        private Optional<String> primaryEmailAddressId = Optional.empty();
 
        private Optional<Boolean> notifyPrimaryEmailAddressChanged;
 
        private Optional<String> primaryPhoneNumberId = Optional.empty();
 
        private Optional<String> primaryWeb3WalletId = Optional.empty();
 
        private JsonNullable<String> username = JsonNullable.undefined();
 
        private JsonNullable<String> profileImageId = JsonNullable.undefined();
 
        private JsonNullable<String> password = JsonNullable.undefined();
 
        private Optional<String> passwordDigest = Optional.empty();
 
        private Optional<? extends UpdateUserPasswordHasher> passwordHasher = Optional.empty();
 
        private JsonNullable<Boolean> skipPasswordChecks = JsonNullable.undefined();
 
        private JsonNullable<Boolean> signOutOfOtherSessions = JsonNullable.undefined();
 
        private Optional<String> totpSecret = Optional.empty();
 
        private Optional<? extends List<String>> backupCodes = Optional.empty();
 
        private Optional<? extends UpdateUserPublicMetadata> publicMetadata = Optional.empty();
 
        private Optional<? extends UpdateUserPrivateMetadata> privateMetadata = Optional.empty();
 
        private Optional<? extends UpdateUserUnsafeMetadata> unsafeMetadata = Optional.empty();
 
        private JsonNullable<Boolean> deleteSelfEnabled = JsonNullable.undefined();
 
        private JsonNullable<Boolean> createOrganizationEnabled = JsonNullable.undefined();
 
        private Optional<String> createdAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the user as used in your external systems or your previous authentication solution.
         * Must be unique across your instance.
         */
        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = JsonNullable.of(externalId);
            return this;
        }

        /**
         * The ID of the user as used in your external systems or your previous authentication solution.
         * Must be unique across your instance.
         */
        public Builder externalId(JsonNullable<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }

        /**
         * The first name to assign to the user
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The first name to assign to the user
         */
        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The last name to assign to the user
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The last name to assign to the user
         */
        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * The ID of the email address to set as primary.
         * It must be verified, and present on the current user.
         */
        public Builder primaryEmailAddressId(String primaryEmailAddressId) {
            Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
            this.primaryEmailAddressId = Optional.ofNullable(primaryEmailAddressId);
            return this;
        }

        /**
         * The ID of the email address to set as primary.
         * It must be verified, and present on the current user.
         */
        public Builder primaryEmailAddressId(Optional<String> primaryEmailAddressId) {
            Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
            this.primaryEmailAddressId = primaryEmailAddressId;
            return this;
        }

        /**
         * If set to `true`, the user will be notified that their primary email address has changed.
         * By default, no notification is sent.
         */
        public Builder notifyPrimaryEmailAddressChanged(boolean notifyPrimaryEmailAddressChanged) {
            Utils.checkNotNull(notifyPrimaryEmailAddressChanged, "notifyPrimaryEmailAddressChanged");
            this.notifyPrimaryEmailAddressChanged = Optional.ofNullable(notifyPrimaryEmailAddressChanged);
            return this;
        }

        /**
         * If set to `true`, the user will be notified that their primary email address has changed.
         * By default, no notification is sent.
         */
        public Builder notifyPrimaryEmailAddressChanged(Optional<Boolean> notifyPrimaryEmailAddressChanged) {
            Utils.checkNotNull(notifyPrimaryEmailAddressChanged, "notifyPrimaryEmailAddressChanged");
            this.notifyPrimaryEmailAddressChanged = notifyPrimaryEmailAddressChanged;
            return this;
        }

        /**
         * The ID of the phone number to set as primary.
         * It must be verified, and present on the current user.
         */
        public Builder primaryPhoneNumberId(String primaryPhoneNumberId) {
            Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
            this.primaryPhoneNumberId = Optional.ofNullable(primaryPhoneNumberId);
            return this;
        }

        /**
         * The ID of the phone number to set as primary.
         * It must be verified, and present on the current user.
         */
        public Builder primaryPhoneNumberId(Optional<String> primaryPhoneNumberId) {
            Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
            this.primaryPhoneNumberId = primaryPhoneNumberId;
            return this;
        }

        /**
         * The ID of the web3 wallets to set as primary.
         * It must be verified, and present on the current user.
         */
        public Builder primaryWeb3WalletId(String primaryWeb3WalletId) {
            Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
            this.primaryWeb3WalletId = Optional.ofNullable(primaryWeb3WalletId);
            return this;
        }

        /**
         * The ID of the web3 wallets to set as primary.
         * It must be verified, and present on the current user.
         */
        public Builder primaryWeb3WalletId(Optional<String> primaryWeb3WalletId) {
            Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
            this.primaryWeb3WalletId = primaryWeb3WalletId;
            return this;
        }

        /**
         * The username to give to the user.
         * It must be unique across your instance.
         */
        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = JsonNullable.of(username);
            return this;
        }

        /**
         * The username to give to the user.
         * It must be unique across your instance.
         */
        public Builder username(JsonNullable<String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        /**
         * The ID of the image to set as the user's profile image
         */
        public Builder profileImageId(String profileImageId) {
            Utils.checkNotNull(profileImageId, "profileImageId");
            this.profileImageId = JsonNullable.of(profileImageId);
            return this;
        }

        /**
         * The ID of the image to set as the user's profile image
         */
        public Builder profileImageId(JsonNullable<String> profileImageId) {
            Utils.checkNotNull(profileImageId, "profileImageId");
            this.profileImageId = profileImageId;
            return this;
        }

        /**
         * The plaintext password to give the user.
         * Must be at least 8 characters long, and can not be in any list of hacked passwords.
         */
        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = JsonNullable.of(password);
            return this;
        }

        /**
         * The plaintext password to give the user.
         * Must be at least 8 characters long, and can not be in any list of hacked passwords.
         */
        public Builder password(JsonNullable<String> password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        /**
         * In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.
         * The digests should be generated with one of the supported algorithms.
         * The hashing algorithm can be specified using the `password_hasher` property.
         */
        public Builder passwordDigest(String passwordDigest) {
            Utils.checkNotNull(passwordDigest, "passwordDigest");
            this.passwordDigest = Optional.ofNullable(passwordDigest);
            return this;
        }

        /**
         * In case you already have the password digests and not the passwords, you can use them for the newly created user via this property.
         * The digests should be generated with one of the supported algorithms.
         * The hashing algorithm can be specified using the `password_hasher` property.
         */
        public Builder passwordDigest(Optional<String> passwordDigest) {
            Utils.checkNotNull(passwordDigest, "passwordDigest");
            this.passwordDigest = passwordDigest;
            return this;
        }

        /**
         * The hashing algorithm that was used to generate the password digest.
         * The algorithms we support at the moment are [bcrypt](https://en.wikipedia.org/wiki/Bcrypt), [bcrypt_sha256_django](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
         * [md5](https://en.wikipedia.org/wiki/MD5), pbkdf2_sha256, pbkdf2_sha512, [pbkdf2_sha256_django](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
         * [phpass](https://www.openwall.com/phpass/), [scrypt_firebase](https://firebaseopensource.com/projects/firebase/scrypt/),
         * [sha256](https://en.wikipedia.org/wiki/SHA-2), [scrypt_werkzeug](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash)
         * and the [argon2](https://argon2.online/) variants argon2i and argon2id.
         * 
         * If you need support for any particular hashing algorithm, [please let us know](https://clerk.com/support).
         * 
         * Note: for password hashers considered insecure (at this moment MD5 and SHA256), the corresponding user password hashes will be transparently migrated to Bcrypt (a secure hasher) upon the user's first successful password sign in.
         * Insecure schemes are marked with `(insecure)` in the list below.
         * 
         * Each of the supported hashers expects the incoming digest to be in a particular format. Specifically:
         * 
         * **bcrypt:** The digest should be of the following form:
         * 
         * `$&lt;algorithm version&gt;$&lt;cost&gt;$&lt;salt &amp; hash&gt;`
         * 
         * **bcrypt_sha256_django:** This is the Django-specific variant of Bcrypt, using SHA256 hashing function. The format should be as follows (as exported from Django):
         * 
         * `bcrypt_sha256$$&lt;algorithm version&gt;$&lt;cost&gt;$&lt;salt &amp; hash&gt;`
         * 
         * **md5** (insecure): The digest should follow the regular form e.g.:
         * 
         * `5f4dcc3b5aa765d61d8327deb882cf99`
         * 
         * **pbkdf2_sha256:** This is the PBKDF2 algorithm using the SHA256 hashing function. The format should be as follows:
         * 
         * `pbkdf2_sha256$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;`
         * 
         * Note: Both the salt and the hash are expected to be base64-encoded.
         * 
         * **pbkdf2_sha512:** This is the PBKDF2 algorithm using the SHA512 hashing function. The format should be as follows:
         * 
         * `pbkdf2_sha512$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;`
         * 
         *   _iterations:_ The number of iterations used. Must be an integer less than 420000.
         *   _salt:_ The salt used when generating the hash. Must be less than bytes.
         *   _hash:_ The hex-encoded hash. Must have been generated with a key length less than 1024 bytes.
         * 
         * **pbkdf2_sha256_django:** This is the Django-specific variant of PBKDF2 and the digest should have the following format (as exported from Django):
         * 
         * `pbkdf2_sha256$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;`
         * 
         * Note: The salt is expected to be un-encoded, the hash is expected base64-encoded.
         * 
         * **pbkdf2_sha1:** This is similar to pkbdf2_sha256_django, but with two differences:
         * 1. uses sha1 instead of sha256
         * 2. accepts the hash as a hex-encoded string
         * 
         * The format is the following:
         * 
         * `pbkdf2_sha1$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash-as-hex-string&gt;`
         * 
         * **phpass:** Portable public domain password hashing framework for use in PHP applications. Digests hashed with phpass have the following sections:
         * 
         * The format is the following:
         * 
         * `$P$&lt;rounds&gt;&lt;salt&gt;&lt;encoded-checksum&gt;`
         * 
         * - $P$ is the prefix used to identify phpass hashes.
         * - rounds is a single character encoding a 6-bit integer representing the number of rounds used.
         * - salt is eight characters drawn from [./0-9A-Za-z], providing a 48-bit salt.
         * - checksum is 22 characters drawn from the same set, encoding the 128-bit checksum with MD5.
         * 
         * **scrypt_firebase:** The Firebase-specific variant of scrypt.
         * The value is expected to have 6 segments separated by the $ character and include the following information:
         * 
         * _hash:_ The actual Base64 hash. This can be retrieved when exporting the user from Firebase.
         * _salt:_ The salt used to generate the above hash. Again, this is given when exporting the user.
         * _signer key:_ The base64 encoded signer key.
         * _salt separator:_ The base64 encoded salt separator.
         * _rounds:_ The number of rounds the algorithm needs to run.
         * _memory cost:_ The cost of the algorithm run
         * 
         * The first 2 (hash and salt) are per user and can be retrieved when exporting the user from Firebase.
         * The other 4 values (signer key, salt separator, rounds and memory cost) are project-wide settings and can be retrieved from the project's password hash parameters.
         * 
         * Once you have all these, you can combine it in the following format and send this as the digest in order for Clerk to accept it:
         * 
         * `&lt;hash&gt;$&lt;salt&gt;$&lt;signer key&gt;$&lt;salt separator&gt;$&lt;rounds&gt;$&lt;memory cost&gt;`
         * 
         * **scrypt_werkzeug:** The Werkzeug-specific variant of scrypt.
         * 
         * The value is expected to have 3 segments separated by the $ character and include the following information:
         * 
         * _algorithm args:_ The algorithm used to generate the hash.
         * _salt:_ The salt used to generate the above hash.
         * _hash:_ The actual Base64 hash.
         * 
         * The algorithm args are the parameters used to generate the hash and are included in the digest.
         * 
         * **argon2i:** Algorithms in the argon2 family generate digests that encode the following information:
         * 
         * _version (v):_ The argon version, version 19 is assumed
         * _memory (m):_ The memory used by the algorithm (in kibibytes)
         * _iterations (t):_ The number of iterations to perform
         * _parallelism (p):_ The number of threads to use
         * 
         * Parts are demarcated by the `$` character, with the first part identifying the algorithm variant.
         * The middle part is a comma-separated list of the encoding options (memory, iterations, parallelism).
         * The final part is the actual digest.
         * 
         * `$argon2i$v=19$m=4096,t=3,p=1$4t6CL3P7YiHBtwESXawI8Hm20zJj4cs7/4/G3c187e0$m7RQFczcKr5bIR0IIxbpO2P0tyrLjf3eUW3M3QSwnLc`
         * 
         * **argon2id:** See the previous algorithm for an explanation of the formatting.
         * 
         * For the argon2id case, the value of the algorithm in the first part of the digest is `argon2id`:
         * 
         * `$argon2id$v=19$m=64,t=4,p=8$Z2liZXJyaXNo$iGXEpMBTDYQ8G/71tF0qGjxRHEmR3gpGULcE93zUJVU`
         * 
         * **sha256** (insecure): The digest should be a 64-length hex string, e.g.:
         * 
         * `9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08`
         */
        public Builder passwordHasher(UpdateUserPasswordHasher passwordHasher) {
            Utils.checkNotNull(passwordHasher, "passwordHasher");
            this.passwordHasher = Optional.ofNullable(passwordHasher);
            return this;
        }

        /**
         * The hashing algorithm that was used to generate the password digest.
         * The algorithms we support at the moment are [bcrypt](https://en.wikipedia.org/wiki/Bcrypt), [bcrypt_sha256_django](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
         * [md5](https://en.wikipedia.org/wiki/MD5), pbkdf2_sha256, pbkdf2_sha512, [pbkdf2_sha256_django](https://docs.djangoproject.com/en/4.0/topics/auth/passwords/),
         * [phpass](https://www.openwall.com/phpass/), [scrypt_firebase](https://firebaseopensource.com/projects/firebase/scrypt/),
         * [sha256](https://en.wikipedia.org/wiki/SHA-2), [scrypt_werkzeug](https://werkzeug.palletsprojects.com/en/3.0.x/utils/#werkzeug.security.generate_password_hash)
         * and the [argon2](https://argon2.online/) variants argon2i and argon2id.
         * 
         * If you need support for any particular hashing algorithm, [please let us know](https://clerk.com/support).
         * 
         * Note: for password hashers considered insecure (at this moment MD5 and SHA256), the corresponding user password hashes will be transparently migrated to Bcrypt (a secure hasher) upon the user's first successful password sign in.
         * Insecure schemes are marked with `(insecure)` in the list below.
         * 
         * Each of the supported hashers expects the incoming digest to be in a particular format. Specifically:
         * 
         * **bcrypt:** The digest should be of the following form:
         * 
         * `$&lt;algorithm version&gt;$&lt;cost&gt;$&lt;salt &amp; hash&gt;`
         * 
         * **bcrypt_sha256_django:** This is the Django-specific variant of Bcrypt, using SHA256 hashing function. The format should be as follows (as exported from Django):
         * 
         * `bcrypt_sha256$$&lt;algorithm version&gt;$&lt;cost&gt;$&lt;salt &amp; hash&gt;`
         * 
         * **md5** (insecure): The digest should follow the regular form e.g.:
         * 
         * `5f4dcc3b5aa765d61d8327deb882cf99`
         * 
         * **pbkdf2_sha256:** This is the PBKDF2 algorithm using the SHA256 hashing function. The format should be as follows:
         * 
         * `pbkdf2_sha256$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;`
         * 
         * Note: Both the salt and the hash are expected to be base64-encoded.
         * 
         * **pbkdf2_sha512:** This is the PBKDF2 algorithm using the SHA512 hashing function. The format should be as follows:
         * 
         * `pbkdf2_sha512$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;`
         * 
         *   _iterations:_ The number of iterations used. Must be an integer less than 420000.
         *   _salt:_ The salt used when generating the hash. Must be less than bytes.
         *   _hash:_ The hex-encoded hash. Must have been generated with a key length less than 1024 bytes.
         * 
         * **pbkdf2_sha256_django:** This is the Django-specific variant of PBKDF2 and the digest should have the following format (as exported from Django):
         * 
         * `pbkdf2_sha256$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;`
         * 
         * Note: The salt is expected to be un-encoded, the hash is expected base64-encoded.
         * 
         * **pbkdf2_sha1:** This is similar to pkbdf2_sha256_django, but with two differences:
         * 1. uses sha1 instead of sha256
         * 2. accepts the hash as a hex-encoded string
         * 
         * The format is the following:
         * 
         * `pbkdf2_sha1$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash-as-hex-string&gt;`
         * 
         * **phpass:** Portable public domain password hashing framework for use in PHP applications. Digests hashed with phpass have the following sections:
         * 
         * The format is the following:
         * 
         * `$P$&lt;rounds&gt;&lt;salt&gt;&lt;encoded-checksum&gt;`
         * 
         * - $P$ is the prefix used to identify phpass hashes.
         * - rounds is a single character encoding a 6-bit integer representing the number of rounds used.
         * - salt is eight characters drawn from [./0-9A-Za-z], providing a 48-bit salt.
         * - checksum is 22 characters drawn from the same set, encoding the 128-bit checksum with MD5.
         * 
         * **scrypt_firebase:** The Firebase-specific variant of scrypt.
         * The value is expected to have 6 segments separated by the $ character and include the following information:
         * 
         * _hash:_ The actual Base64 hash. This can be retrieved when exporting the user from Firebase.
         * _salt:_ The salt used to generate the above hash. Again, this is given when exporting the user.
         * _signer key:_ The base64 encoded signer key.
         * _salt separator:_ The base64 encoded salt separator.
         * _rounds:_ The number of rounds the algorithm needs to run.
         * _memory cost:_ The cost of the algorithm run
         * 
         * The first 2 (hash and salt) are per user and can be retrieved when exporting the user from Firebase.
         * The other 4 values (signer key, salt separator, rounds and memory cost) are project-wide settings and can be retrieved from the project's password hash parameters.
         * 
         * Once you have all these, you can combine it in the following format and send this as the digest in order for Clerk to accept it:
         * 
         * `&lt;hash&gt;$&lt;salt&gt;$&lt;signer key&gt;$&lt;salt separator&gt;$&lt;rounds&gt;$&lt;memory cost&gt;`
         * 
         * **scrypt_werkzeug:** The Werkzeug-specific variant of scrypt.
         * 
         * The value is expected to have 3 segments separated by the $ character and include the following information:
         * 
         * _algorithm args:_ The algorithm used to generate the hash.
         * _salt:_ The salt used to generate the above hash.
         * _hash:_ The actual Base64 hash.
         * 
         * The algorithm args are the parameters used to generate the hash and are included in the digest.
         * 
         * **argon2i:** Algorithms in the argon2 family generate digests that encode the following information:
         * 
         * _version (v):_ The argon version, version 19 is assumed
         * _memory (m):_ The memory used by the algorithm (in kibibytes)
         * _iterations (t):_ The number of iterations to perform
         * _parallelism (p):_ The number of threads to use
         * 
         * Parts are demarcated by the `$` character, with the first part identifying the algorithm variant.
         * The middle part is a comma-separated list of the encoding options (memory, iterations, parallelism).
         * The final part is the actual digest.
         * 
         * `$argon2i$v=19$m=4096,t=3,p=1$4t6CL3P7YiHBtwESXawI8Hm20zJj4cs7/4/G3c187e0$m7RQFczcKr5bIR0IIxbpO2P0tyrLjf3eUW3M3QSwnLc`
         * 
         * **argon2id:** See the previous algorithm for an explanation of the formatting.
         * 
         * For the argon2id case, the value of the algorithm in the first part of the digest is `argon2id`:
         * 
         * `$argon2id$v=19$m=64,t=4,p=8$Z2liZXJyaXNo$iGXEpMBTDYQ8G/71tF0qGjxRHEmR3gpGULcE93zUJVU`
         * 
         * **sha256** (insecure): The digest should be a 64-length hex string, e.g.:
         * 
         * `9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08`
         */
        public Builder passwordHasher(Optional<? extends UpdateUserPasswordHasher> passwordHasher) {
            Utils.checkNotNull(passwordHasher, "passwordHasher");
            this.passwordHasher = passwordHasher;
            return this;
        }

        /**
         * Set it to `true` if you're updating the user's password and want to skip any password policy settings check. This parameter can only be used when providing a `password`.
         */
        public Builder skipPasswordChecks(boolean skipPasswordChecks) {
            Utils.checkNotNull(skipPasswordChecks, "skipPasswordChecks");
            this.skipPasswordChecks = JsonNullable.of(skipPasswordChecks);
            return this;
        }

        /**
         * Set it to `true` if you're updating the user's password and want to skip any password policy settings check. This parameter can only be used when providing a `password`.
         */
        public Builder skipPasswordChecks(JsonNullable<Boolean> skipPasswordChecks) {
            Utils.checkNotNull(skipPasswordChecks, "skipPasswordChecks");
            this.skipPasswordChecks = skipPasswordChecks;
            return this;
        }

        /**
         * Set to `true` to sign out the user from all their active sessions once their password is updated. This parameter can only be used when providing a `password`.
         */
        public Builder signOutOfOtherSessions(boolean signOutOfOtherSessions) {
            Utils.checkNotNull(signOutOfOtherSessions, "signOutOfOtherSessions");
            this.signOutOfOtherSessions = JsonNullable.of(signOutOfOtherSessions);
            return this;
        }

        /**
         * Set to `true` to sign out the user from all their active sessions once their password is updated. This parameter can only be used when providing a `password`.
         */
        public Builder signOutOfOtherSessions(JsonNullable<Boolean> signOutOfOtherSessions) {
            Utils.checkNotNull(signOutOfOtherSessions, "signOutOfOtherSessions");
            this.signOutOfOtherSessions = signOutOfOtherSessions;
            return this;
        }

        /**
         * In case TOTP is configured on the instance, you can provide the secret to enable it on the specific user without the need to reset it.
         * Please note that currently the supported options are:
         * * Period: 30 seconds
         * * Code length: 6 digits
         * * Algorithm: SHA1
         */
        public Builder totpSecret(String totpSecret) {
            Utils.checkNotNull(totpSecret, "totpSecret");
            this.totpSecret = Optional.ofNullable(totpSecret);
            return this;
        }

        /**
         * In case TOTP is configured on the instance, you can provide the secret to enable it on the specific user without the need to reset it.
         * Please note that currently the supported options are:
         * * Period: 30 seconds
         * * Code length: 6 digits
         * * Algorithm: SHA1
         */
        public Builder totpSecret(Optional<String> totpSecret) {
            Utils.checkNotNull(totpSecret, "totpSecret");
            this.totpSecret = totpSecret;
            return this;
        }

        /**
         * If Backup Codes are configured on the instance, you can provide them to enable it on the specific user without the need to reset them.
         * You must provide the backup codes in plain format or the corresponding bcrypt digest.
         */
        public Builder backupCodes(List<String> backupCodes) {
            Utils.checkNotNull(backupCodes, "backupCodes");
            this.backupCodes = Optional.ofNullable(backupCodes);
            return this;
        }

        /**
         * If Backup Codes are configured on the instance, you can provide them to enable it on the specific user without the need to reset them.
         * You must provide the backup codes in plain format or the corresponding bcrypt digest.
         */
        public Builder backupCodes(Optional<? extends List<String>> backupCodes) {
            Utils.checkNotNull(backupCodes, "backupCodes");
            this.backupCodes = backupCodes;
            return this;
        }

        /**
         * Metadata saved on the user, that is visible to both your Frontend and Backend APIs
         */
        public Builder publicMetadata(UpdateUserPublicMetadata publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = Optional.ofNullable(publicMetadata);
            return this;
        }

        /**
         * Metadata saved on the user, that is visible to both your Frontend and Backend APIs
         */
        public Builder publicMetadata(Optional<? extends UpdateUserPublicMetadata> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = publicMetadata;
            return this;
        }

        /**
         * Metadata saved on the user, that is only visible to your Backend API
         */
        public Builder privateMetadata(UpdateUserPrivateMetadata privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = Optional.ofNullable(privateMetadata);
            return this;
        }

        /**
         * Metadata saved on the user, that is only visible to your Backend API
         */
        public Builder privateMetadata(Optional<? extends UpdateUserPrivateMetadata> privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = privateMetadata;
            return this;
        }

        /**
         * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
         * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
         */
        public Builder unsafeMetadata(UpdateUserUnsafeMetadata unsafeMetadata) {
            Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
            this.unsafeMetadata = Optional.ofNullable(unsafeMetadata);
            return this;
        }

        /**
         * Metadata saved on the user, that can be updated from both the Frontend and Backend APIs.
         * Note: Since this data can be modified from the frontend, it is not guaranteed to be safe.
         */
        public Builder unsafeMetadata(Optional<? extends UpdateUserUnsafeMetadata> unsafeMetadata) {
            Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
            this.unsafeMetadata = unsafeMetadata;
            return this;
        }

        /**
         * If true, the user can delete themselves with the Frontend API.
         */
        public Builder deleteSelfEnabled(boolean deleteSelfEnabled) {
            Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
            this.deleteSelfEnabled = JsonNullable.of(deleteSelfEnabled);
            return this;
        }

        /**
         * If true, the user can delete themselves with the Frontend API.
         */
        public Builder deleteSelfEnabled(JsonNullable<Boolean> deleteSelfEnabled) {
            Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
            this.deleteSelfEnabled = deleteSelfEnabled;
            return this;
        }

        /**
         * If true, the user can create organizations with the Frontend API.
         */
        public Builder createOrganizationEnabled(boolean createOrganizationEnabled) {
            Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
            this.createOrganizationEnabled = JsonNullable.of(createOrganizationEnabled);
            return this;
        }

        /**
         * If true, the user can create organizations with the Frontend API.
         */
        public Builder createOrganizationEnabled(JsonNullable<Boolean> createOrganizationEnabled) {
            Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
            this.createOrganizationEnabled = createOrganizationEnabled;
            return this;
        }

        /**
         * A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * A custom date/time denoting _when_ the user signed up to the application, specified in RFC3339 format (e.g. `2012-10-20T07:15:20.902Z`).
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }
        
        public UpdateUserRequestBody build() {
            if (notifyPrimaryEmailAddressChanged == null) {
                notifyPrimaryEmailAddressChanged = _SINGLETON_VALUE_NotifyPrimaryEmailAddressChanged.value();
            }            return new UpdateUserRequestBody(
                externalId,
                firstName,
                lastName,
                primaryEmailAddressId,
                notifyPrimaryEmailAddressChanged,
                primaryPhoneNumberId,
                primaryWeb3WalletId,
                username,
                profileImageId,
                password,
                passwordDigest,
                passwordHasher,
                skipPasswordChecks,
                signOutOfOtherSessions,
                totpSecret,
                backupCodes,
                publicMetadata,
                privateMetadata,
                unsafeMetadata,
                deleteSelfEnabled,
                createOrganizationEnabled,
                createdAt);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_NotifyPrimaryEmailAddressChanged =
                new LazySingletonValue<>(
                        "notify_primary_email_address_changed",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}

