/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;


import com.clerk.backend_api.utils.LazySingletonValue;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class UpdateOAuthApplicationRequestBody {

    /**
     * The new name of the OAuth application
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The new callback URL of the OAuth application
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callback_url")
    private Optional<String> callbackUrl;

    /**
     * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private Optional<String> scopes;

    @JsonCreator
    public UpdateOAuthApplicationRequestBody(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("callback_url") Optional<String> callbackUrl,
            @JsonProperty("scopes") Optional<String> scopes) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(callbackUrl, "callbackUrl");
        Utils.checkNotNull(scopes, "scopes");
        this.name = name;
        this.callbackUrl = callbackUrl;
        this.scopes = scopes;
    }
    
    public UpdateOAuthApplicationRequestBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The new name of the OAuth application
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The new callback URL of the OAuth application
     */
    @JsonIgnore
    public Optional<String> callbackUrl() {
        return callbackUrl;
    }

    /**
     * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
     */
    @JsonIgnore
    public Optional<String> scopes() {
        return scopes;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The new name of the OAuth application
     */
    public UpdateOAuthApplicationRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The new name of the OAuth application
     */
    public UpdateOAuthApplicationRequestBody withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The new callback URL of the OAuth application
     */
    public UpdateOAuthApplicationRequestBody withCallbackUrl(String callbackUrl) {
        Utils.checkNotNull(callbackUrl, "callbackUrl");
        this.callbackUrl = Optional.ofNullable(callbackUrl);
        return this;
    }

    /**
     * The new callback URL of the OAuth application
     */
    public UpdateOAuthApplicationRequestBody withCallbackUrl(Optional<String> callbackUrl) {
        Utils.checkNotNull(callbackUrl, "callbackUrl");
        this.callbackUrl = callbackUrl;
        return this;
    }

    /**
     * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
     */
    public UpdateOAuthApplicationRequestBody withScopes(String scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = Optional.ofNullable(scopes);
        return this;
    }

    /**
     * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
     */
    public UpdateOAuthApplicationRequestBody withScopes(Optional<String> scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = scopes;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateOAuthApplicationRequestBody other = (UpdateOAuthApplicationRequestBody) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.callbackUrl, other.callbackUrl) &&
            Objects.deepEquals(this.scopes, other.scopes);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            callbackUrl,
            scopes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateOAuthApplicationRequestBody.class,
                "name", name,
                "callbackUrl", callbackUrl,
                "scopes", scopes);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> callbackUrl = Optional.empty();
 
        private Optional<String> scopes;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The new name of the OAuth application
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The new name of the OAuth application
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The new callback URL of the OAuth application
         */
        public Builder callbackUrl(String callbackUrl) {
            Utils.checkNotNull(callbackUrl, "callbackUrl");
            this.callbackUrl = Optional.ofNullable(callbackUrl);
            return this;
        }

        /**
         * The new callback URL of the OAuth application
         */
        public Builder callbackUrl(Optional<String> callbackUrl) {
            Utils.checkNotNull(callbackUrl, "callbackUrl");
            this.callbackUrl = callbackUrl;
            return this;
        }

        /**
         * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
         */
        public Builder scopes(String scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = Optional.ofNullable(scopes);
            return this;
        }

        /**
         * Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
         */
        public Builder scopes(Optional<String> scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = scopes;
            return this;
        }
        
        public UpdateOAuthApplicationRequestBody build() {
            if (scopes == null) {
                scopes = _SINGLETON_VALUE_Scopes.value();
            }            return new UpdateOAuthApplicationRequestBody(
                name,
                callbackUrl,
                scopes);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Scopes =
                new LazySingletonValue<>(
                        "scopes",
                        "\"profile email\"",
                        new TypeReference<Optional<String>>() {});
    }
}

