/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;


import com.clerk.backend_api.utils.LazySingletonValue;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class CreateSignInTokenRequestBody {

    /**
     * The ID of the user that can use the newly created sign in token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    private Optional<String> userId;

    /**
     * Optional parameter to specify the life duration of the sign in token in seconds.
     * By default, the duration is 30 days.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_in_seconds")
    private Optional<Long> expiresInSeconds;

    @JsonCreator
    public CreateSignInTokenRequestBody(
            @JsonProperty("user_id") Optional<String> userId,
            @JsonProperty("expires_in_seconds") Optional<Long> expiresInSeconds) {
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(expiresInSeconds, "expiresInSeconds");
        this.userId = userId;
        this.expiresInSeconds = expiresInSeconds;
    }
    
    public CreateSignInTokenRequestBody() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The ID of the user that can use the newly created sign in token
     */
    @JsonIgnore
    public Optional<String> userId() {
        return userId;
    }

    /**
     * Optional parameter to specify the life duration of the sign in token in seconds.
     * By default, the duration is 30 days.
     */
    @JsonIgnore
    public Optional<Long> expiresInSeconds() {
        return expiresInSeconds;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the user that can use the newly created sign in token
     */
    public CreateSignInTokenRequestBody withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }

    /**
     * The ID of the user that can use the newly created sign in token
     */
    public CreateSignInTokenRequestBody withUserId(Optional<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    /**
     * Optional parameter to specify the life duration of the sign in token in seconds.
     * By default, the duration is 30 days.
     */
    public CreateSignInTokenRequestBody withExpiresInSeconds(long expiresInSeconds) {
        Utils.checkNotNull(expiresInSeconds, "expiresInSeconds");
        this.expiresInSeconds = Optional.ofNullable(expiresInSeconds);
        return this;
    }

    /**
     * Optional parameter to specify the life duration of the sign in token in seconds.
     * By default, the duration is 30 days.
     */
    public CreateSignInTokenRequestBody withExpiresInSeconds(Optional<Long> expiresInSeconds) {
        Utils.checkNotNull(expiresInSeconds, "expiresInSeconds");
        this.expiresInSeconds = expiresInSeconds;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateSignInTokenRequestBody other = (CreateSignInTokenRequestBody) o;
        return 
            Objects.deepEquals(this.userId, other.userId) &&
            Objects.deepEquals(this.expiresInSeconds, other.expiresInSeconds);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            userId,
            expiresInSeconds);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateSignInTokenRequestBody.class,
                "userId", userId,
                "expiresInSeconds", expiresInSeconds);
    }
    
    public final static class Builder {
 
        private Optional<String> userId = Optional.empty();
 
        private Optional<Long> expiresInSeconds;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the user that can use the newly created sign in token
         */
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        /**
         * The ID of the user that can use the newly created sign in token
         */
        public Builder userId(Optional<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        /**
         * Optional parameter to specify the life duration of the sign in token in seconds.
         * By default, the duration is 30 days.
         */
        public Builder expiresInSeconds(long expiresInSeconds) {
            Utils.checkNotNull(expiresInSeconds, "expiresInSeconds");
            this.expiresInSeconds = Optional.ofNullable(expiresInSeconds);
            return this;
        }

        /**
         * Optional parameter to specify the life duration of the sign in token in seconds.
         * By default, the duration is 30 days.
         */
        public Builder expiresInSeconds(Optional<Long> expiresInSeconds) {
            Utils.checkNotNull(expiresInSeconds, "expiresInSeconds");
            this.expiresInSeconds = expiresInSeconds;
            return this;
        }
        
        public CreateSignInTokenRequestBody build() {
            if (expiresInSeconds == null) {
                expiresInSeconds = _SINGLETON_VALUE_ExpiresInSeconds.value();
            }            return new CreateSignInTokenRequestBody(
                userId,
                expiresInSeconds);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_ExpiresInSeconds =
                new LazySingletonValue<>(
                        "expires_in_seconds",
                        "2592000",
                        new TypeReference<Optional<Long>>() {});
    }
}

